// Cube Data Extraction Code
 
#include <stm32f4xx.h>
#include <misc.h>			
#include <stm32f4xx_usart.h>
#include <stm32f4xx_spi.h>
#include <stm32f4xx_tim.h>
#include <stm32f4xx_flash.h>
#include "arm_math.h" 
#include "math_helper.h" 

void init_GPIO(void); // gpio for debugging
void init_SPI1(void);
uint16_t get_spidata(uint16_t data);
void send_spidata(uint16_t data);
void cubedata(void);
void RCC_Configuration(void);
void GPIO_Configuration(void);
void USART3_Configuration(void);
void twoscomphandler(uint16_t value);
void printvalue(uint16_t display);
void gyrocalibration(void);

void Delay(__IO uint32_t nCount) {
   while(nCount--) {
  }
}

/* These functions handle SPI transfers*/
void SPI1_send(uint16_t data){

	SPI1->DR = data; // write data to be transmitted to the SPI data register
	while( !(SPI1->SR & SPI_I2S_FLAG_TXE) ); // wait until transmit complete
	while( SPI1->SR & SPI_I2S_FLAG_BSY ); // wait until SPI is not busy anymore
}

uint16_t SPI1_receive(void){
	
	while( !(SPI1->SR & SPI_I2S_FLAG_RXNE) ); // wait until receive complete
	while( SPI1->SR & SPI_I2S_FLAG_BSY ); // wait until SPI is not busy anymore
	return SPI1->DR; // return received data from SPI data register
}

void USART_puts(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
		// wait until data register is empty
		//while( !(USARTx->SR & 0x00000040) ); 
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET); // Wait on Transmitter Empty
		USART_SendData(USARTx, *s);
		*s++;
	}
}

// variables for cube
int xaccel;
int yaccel;
int zaccel;
int xgyro;
int ygyro;
int zgyro;
int xmagn;
int ymagn;
int zmagn;
int temper;
int garbage;
int cubecount=0;
int receivedvalue=0;
double measout=0;

int16_t xgyrobias=0;
int16_t ygyrobias=0;
int16_t zgyrobias=0;

int a;
int z;
char c;
char d[5] = {0,0,0,0,0};
long int n;
long int temp;
int i;


int main(void){
	int counter=0;
	
	RCC_Configuration();
  GPIO_Configuration();
  USART3_Configuration();
	init_GPIO();
	init_SPI1(); // enables spi
	
	while(counter<100){
		cubedata();
		twoscomphandler(xgyro);
		counter++;}
		
	counter = 0;
	USART_puts(USART3, "\r\n");
	USART_puts(USART3, "\r\n");
	
	gyrocalibration();
		
	while(counter<100){
		cubedata();
		twoscomphandler(xgyro);
		counter++;}
	
	
	while(1){
		cubedata();
		
	}
		
}

void gyrocalibration(void)
{
	int count=0;
	int16_t xgyroave=0;
	int16_t ygyroave=0;
	int16_t zgyroave=0;
	int16_t xout;
	int16_t yout;
	int16_t zout;
	int16_t xout2;
	int16_t yout2;
	int16_t zout2;
	
	while(count<100){
		cubedata();
		
		xgyroave = xgyroave + (xgyro<<2); // shifted by two because data is 14 bits
		ygyroave = ygyroave + (ygyro<<2);
		zgyroave = zgyroave + (zgyro<<2);
		
		count++;
	}
	
	if(xgyrobias>0x7FFF)
		{xgyrobias = ~((xgyroave>>2)/100);}
	else
		{xgyrobias = (xgyroave>>2)/100;}
	
	if(ygyrobias>0x7FFF)
		{ygyrobias = ~((ygyroave>>2)/100);}
	else
		{ygyrobias = (ygyroave>>2)/100;}
	
	if(zgyrobias>0x7FFF)
		{zgyrobias = ~((zgyroave>>2)/100);}
	else
		{zgyrobias = (zgyroave>>2)/100;}
	
	
	
	/*xout = (xgyrobias&0x00FF) + 0x9E00;
	xout2 = ((xgyrobias&0x1F00)/256) + 0x9F00;
	yout = (ygyrobias&0x00FF) + 0xA000;
	yout2 = ((ygyrobias&0x1F00)/256) + 0xA100;
	zout = (zgyrobias&0x00FF) + 0xA200;
	zout2 = ((zgyrobias&0x1F00)/256) + 0xA300;
	
	send_spidata(xout);
	Delay(40000);
	send_spidata(xout2);
	Delay(40000);
	send_spidata(yout);
	Delay(40000);
	send_spidata(yout2);
	Delay(40000);
	send_spidata(zout);
	Delay(40000);
	send_spidata(zout2);
	Delay(40000);*/
}

//converts two's compliment numbers to +/- and prints them

void twoscomphandler(uint16_t value){
	if(value>0x1FFF)
		{
			USART_puts(USART3, "-");
			value=((~value)&0x1FFF);
			printvalue(value);
		}
		else
		{
			printvalue(value);
		}
	}
	
void printvalue(uint16_t display)
{
	d[0]=0;
	d[1]=0;
	d[2]=0;
	d[3]=0;
	d[4]=0;
	n = display;
	temp = n; // temporary storage 
	z=1; // value to ensure 0 gets printed
	
	while(temp!=0){
		temp=temp/10;
		i++;
	}
	
	while(i!=0){
		a=n%10;
		c=a | 0x30;
		d[i-1] = a | 0x30;
		n=n/10;
		i--;
		z=0;
	}
	if(z==0){
	USART_puts(USART3, d); // send current voltage value
	USART_puts(USART3, " \r\n"); // just returns to next line
	}
	else{
	USART_puts(USART3, "0\r\n"); // send current voltage value
	}
	i=0;
}

uint16_t get_spidata(uint16_t data){
	  GPIOE->BSRRH |= GPIO_Pin_7; // set PE7 (CS) low
		SPI1_send(data); // transmit dummy byte and receive data
	  receivedvalue = SPI1_receive(); // receive data
		GPIOE->BSRRL |= GPIO_Pin_7; // set PE7 (CS) high
		return receivedvalue;
}

void send_spidata(uint16_t data){
		GPIOE->BSRRH |= GPIO_Pin_7; // set PE7 (CS) low
		SPI1_send(data); // transmit dummy byte and receive data
		GPIOE->BSRRL |= GPIO_Pin_7; // set PE7 (CS) high
}

void cubedata(void){
			get_spidata(0x0A00); // read data
			temper = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0C00); // read data
			xaccel = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0E00); // read data
			yaccel = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0400); // read data
			zaccel = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0600); // read data
			xgyro = ((receivedvalue-xgyrobias)&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0800); // read data
			ygyro = ((receivedvalue-ygyrobias)&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1000); // read data
			zgyro = ((receivedvalue-zgyrobias)&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1200); // read data
			xmagn = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1400); // read data
			ymagn = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1600); // read data
			zmagn = (receivedvalue&0x3FFF);
			Delay(40000);
	
}

void RCC_Configuration(void)
{
  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART3 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 
  /* GPIOB clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
}
 
/**************************************************************************************/
 
void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
 
  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 
  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);
}
 
/**************************************************************************************/
 
void USART3_Configuration(void)
{
    USART_InitTypeDef USART_InitStructure;
 
  /* USARTx configuration ------------------------------------------------------*/
  /* USARTx configured as follow:
        - BaudRate = 9600 baud
        - Word Length = 8 Bits
        - Two Stop Bit
        - Odd parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 9600;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 
  USART_Init(USART3, &USART_InitStructure);
 
  USART_Cmd(USART3, ENABLE);
}

void init_GPIO(void){

	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_14 | GPIO_Pin_13 | GPIO_Pin_12; // we want to configure all LED GPIO pins
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT; 		// we want the pins to be an output
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz; 	// this sets the GPIO modules clock speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; 	// this sets the pin type to push / pull (as opposed to open drain)
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; 	// this sets the pullup / pulldown resistors to be inactive
	GPIO_Init(GPIOD, &GPIO_InitStruct); 			// this finally passes all the values to the GPIO_Init function which takes care of setting the corresponding bits.
}

void init_SPI1(void){

	GPIO_InitTypeDef GPIO_InitStruct;
	SPI_InitTypeDef SPI_InitStruct;

	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	/* configure pins used by SPI1
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStruct);

	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);

	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	/* Configure the chip select pin
	   in this case we will use PE7 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOE, &GPIO_InitStruct);

	GPIOE->BSRRL |= GPIO_Pin_7; // set PE7 high

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b; // one packet of data is 16 bits wide
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;        // clock is high when idle
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;      // data sampled at second edge
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64; // SPI frequency is APB2 frequency / 64
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
	SPI_Init(SPI1, &SPI_InitStruct); 
	
	// RCC_PCLK2Config(RCC_HCLK_Div16); // slows down clock speed

	SPI_Cmd(SPI1, ENABLE); // enable SPI1
}