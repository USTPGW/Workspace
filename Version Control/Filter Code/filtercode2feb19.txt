// Unscented Kalman Filter File
// Created by Dan Kassen
// Hand-Converted to C from Matlab file written by previous senior design team

#include <stm32f4xx.h>
#include <misc.h>			
#include <stm32f4xx_usart.h>
#include <stm32f4xx_spi.h>
#include <stm32f4xx_tim.h>
#include <stm32f4xx_flash.h>
#include "arm_math.h" 
#include "math_helper.h" 

double V(double u, double v, double w);
double alpha(double u, double w);
double beta(double u, double v, double w);
double qbar(double u, double v, double w);

double Cx(double u, double w, double i);
double Cy(double u, double v, double w, double p, double r);
double Cz(double u, double w, double i);

double Cl(double u, double v, double w, double p, double r);
double Cm(double u, double w, double q);
double Cn(double u, double v, double w, double p, double r);

double L(double u, double v, double w, double p, double r);
double M(double u, double v, double w, double q);
double N(double u, double v, double w, double p, double r);

double magZ(double phi, double theta, double psi);

double f(double x[]);
double h(double x[]);
void t(double x[], double output[]);

double ukf(double fstate, double x, double P, double hmeas, double z, double Q, double R);
double sigmas(double x, double P, double c);
void ut(double f, double X, double Wm, double Wc, double n, double R, double *y, double Y, double P, double Y1);

//some basic matrix functions
void zeroes(double n, double *A);

void Delay(__IO uint32_t nCount) {
   while(nCount--) {
  }
}

double gravity = 9.81;
double rho = 1026;
double mass = 3.402;
double buoyancy;
double motor = 1;
double S = .182775;
double b = 1.32;
double c = 0.08;
double Ixx = .8742;
double Iyy = .9032;
double Izz = .355;
double Ixz = .056;
double dt = 0.01;	

// Covariance Matrix
double Q[24][24] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0.000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0.000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0.000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0.000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0.000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0.000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

// Sensor Covariances
double R[10][10] = {
	0.00125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0.00125, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0.00125, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0.009*9.81, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0.009*9.81, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0.009*9.81, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0.0157, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0.0157, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0.0157, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 
};

double test[2][2] = {
	1, 2, 3, 4
};

double test2[2][2] = {
	4, 3, 2, 1
};

double *test3;

double i;
double output[3];
double row;
double col;
double di;
double h_cg;
double cbuoy;
double z;
double netbuoyancy;


int main(void) {
	
	netbuoyancy = mass*gravity + cbuoy;
	
	while(1){
		test3 = &test2[0][0];
		}
}

double V(double u, double v, double w)
{return sqrt(u*u + v*v + w*w);}

double alpha(double u, double w)
{return w/u;}

double beta(double u, double v, double w)
{return v/V(u,v,w);}
	
double qbar(double u, double v, double w)
{return (rho*V(u,v,w)*V(u,v,w))/2;}
	
double Cx(double u, double w, double i)
{return 4.176*(alpha(u,w)+0.875*i)*alpha(u,w) - (0.010652+0.0393*(4.176*(alpha(u,w)+0.875*i))*(4.176*(alpha(u,w)+0.875*i)))*(1-(alpha(u,w)*alpha(u,w))/2);}

double Cy(double u, double v, double w, double p, double r)
{return 0.39569*beta(u,v,w) - 0.021877*p + 0.46644*r;}

double Cz(double u, double w, double i)
{return -4.176*(alpha(u,w)+0.875*i)*(1-(alpha(u,w)*alpha(u,w))) - (0.010652+0.0393*(4.176*(alpha(u,w)+0.875*i)*(4.176*(alpha(u,w)+0.875*i)))*alpha(u,w));}

double Cl(double u, double v, double w, double p, double r)
{return -0.52494*p + 0.00014753*beta(u,w,v) + 0.0013735*r + 64.7*(-di);}
	
double Cm(double u, double w, double q)
{return (-2.21 + 3.06*i + 4*(h_cg-0.25))*(alpha(u,w)+0.875*i) + 0.9*i - 18.305*q;}
	
double Cn(double u, double v, double w, double p, double r)
{return -.22218*beta(u,v,w) + 0.012151*p - 0.26078*r;}
	
double L(double u, double v, double w, double p, double r)
{return qbar(u,v,w)*S*b*Cl(u,v,w,p,r);}

double M(double u, double v, double w, double q)
{return qbar(u,v,w)*S*c*Cm(u,w,q);}

double N(double u, double v, double w, double p, double r)
{return qbar(u,v,w)*S*b*Cn(u,v,w,p,r);}

double magZ(double phi, double theta, double psi)
{
	double a;
	double mb;
	a = .31*theta*(1-(phi*phi)/2)*(1-(psi*psi)/2);
	mb = .31*phi*psi;
	if((a+mb)>=0)
		{return sqrt(a*a+mb*mb);}
	else
		{return -sqrt(a*a+mb*mb);}
}

double f(double x[]) // state transition equation, updated to reflect 0 indexing, may need to update method of outputing
{
	double f[24];
/*u-dot*/			f[0] = x[0] + dt*((qbar(x[0],x[1],x[2])*S*Cx(x[0],x[2],i)+motor)/mass - gravity*x[4] + (netbuoyancy/mass)*x[4]+x[8]*x[1] - x[7]*x[2]);
/*v-dot*/			f[1] = x[1] + dt*(qbar(x[0],x[1],x[2])*S*Cy(x[0],x[1],x[2],x[6],x[8])/mass + gravity*x[3]*(1-(x[4]*x[4])/2) - (netbuoyancy/mass)*x[3]*(1-(x[4]*x[4])/2) - x[8]*x[0] - x[2]*x[6]);
/*w-dot*/			f[2] = x[2] + dt*(qbar(x[0],x[1],x[2])*S*Cz(x[0],x[1],i)/mass + gravity*(1-(x[2]*x[2])/2)*(1-(x[4]*x[4])/2) - (netbuoyancy/mass)*(1-(x[3]*x[3])/2)*(1-(x[4]*x[4])/2) - x[7]*x[0] - x[6]*x[1]);
/*phi-dot*/		f[3] = x[3] + dt*(x[6] + (x[7]*x[3] + x[8]*(1-(x[3]*x[3])/2))*x[4]);
/*theta-dot*/	f[4] = x[4] + dt*(x[7]*(1-(x[3]*x[3])/2) + x[8]*x[3]);
/*psi-dot*/		f[5] = x[5] + dt*(x[7]*x[3] + x[8]*(1-(x[3]*x[3])/2)*(1/(1-(x[4]*x[4])/2)));
/*p-dot*/			f[6] = x[6] + dt*((Ixx*L(x[0],x[1],x[2],x[6],x[8]) + Ixz*N(x[0],x[1],x[2],x[6],x[8]) - (Ixz*(Iyy-Ixx-Izz)*x[6] + (Ixx*Ixx + Izz*(Izz-Iyy))*x[8])*x[7])/(Ixx*Izz  -Ixz*Ixz));
/*q-dot*/			f[7] = x[7] + dt*((M(x[0],x[1],x[2],x[7]) - (Ixx - Izz)*x[6]*x[8] - Ixz*(x[6]*x[6]-x[8]*x[8]))/Iyy);
/*r-dot*/			f[8] = x[8] + dt*((Ixz*L(x[0],x[1],x[2],x[6],x[8]) + Ixx*N(x[0],x[1],x[2],x[6],x[8]) - (Ixz*(Iyy-Ixx-Izz)*x[8] + (Ixz*Ixz + Ixx*(Ixx-Iyy))*x[6]*x[7]))/(Ixx*Izz - Ixz*Ixz));
/*x-dot*/			f[9] = x[9] + dt*((1-(x[4]*x[4])/2)*(1-(x[5]*x[5])/2)*x[0] + (-(1-(x[3]*x[3])/2)*x[5] + x[3]*x[4]*(1-(x[5]*x[5])/2))*x[1] + (x[3]*x[5] + (1-(x[3]*x[3])/2)*x[4]*(1-(x[5]*x[5])/2))*x[2]+x[12]);
/*y-dot*/			f[10] = x[10] + dt*((1-(x[4]*x[4])/2)*x[5]*x[0] + (-(1-(x[3]*x[3])/2)*(1-(x[5]*x[5])/2) + x[3]*x[4]*x[5])*x[1] + (x[3]*(1-(x[5]*x[5])/2) + (1-(x[3]*x[3])/2)*x[4]*x[5])*x[2] + x[13]);
/*z-dot*/			f[11] = x[11] + dt*(-x[4]*x[0] + x[3]*(1-(x[4]*x[4])/2)*x[1] + (1-(x[3]*x[3])/2)*(1-(x[4]*x[4])/2)*x[2]);
							f[12] = x[12]; f[13] = x[13]; f[14] = x[14]; f[15] = x[15]; f[16] = x[16]; f[17] = x[17]; // biases
							f[18] = x[18]; f[19] = x[19]; f[20] = x[20]; f[21] = x[21]; f[22] = x[22]; f[23] = x[23]; // biases
	return f[24];
}
 
double h(double x[])
{ // observation update equation
	double f[10];
	f[0] = .31*(1-(x[4]*x[4])/2)*(1-(x[5]*x[5])/2) + x[14]; // magnetometer x
	f[1] = .31*(1-(x[3]*x[3])/2)*-x[5] + x[15]; // magnetometer y
	f[2] = magZ(x[3],x[4],x[5]) + x[16]; // magnetometer z
	f[3] = -gravity*x[4] + x[17]; // accelerometer x
	f[4] = gravity*x[3]*(1-(x[4]*x[4])/2)+x[18]; // accelerometer y
	f[5] = gravity*(1-(x[3]*x[3])/2)*(1-(x[4]*x[4])/2) + x[20]; // accelerometer z
	f[6] = x[6] + x[20]; // gyro p
	f[7] = x[7] + x[21]; // gyro q
	f[8] = x[8] + x[22]; // gyro r
	f[9] = x[11]*1.47 + 14.223 + x[23]; // pressure in PSI (depth)
}	

void t(double x[], double output[]) // test function to understand matrices in C
{ 
	output[0] = x[0]*2;
	output[1] = x[1]*3;
	output[2] = x[2]*4;
}

double ukf(double fstate, double x, double P, double hmeas, double z, double Q, double R)
{
	double uL = 24; // # of states
	double m = 10; // # of measurements
	double ualpha = .001; // default, tunable
	double ki=0; // default, tunable
	double ubeta=1; // default, tunable
	double lambda = -24.00;
	double uc = .000024;
	double X;
	
	double Wc[49] = {(-24/.000024)-.000001, (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024)};
		
	double Wm[49] = {-24/.000024, (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024),
						(0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024), (0.5/.000024)};
	
	lambda = ualpha*ualpha*(uL+ki)-uL;
	uc = uL+lambda;
	uc = sqrt(uc);
	
	X=sigmas(x,P,uc);	
}

void ut(double f, double X, double Wm, double Wc, double n, double R, double *y, double Y, double P, double Y1)
{
	double utL = 49;
	
	zeroes(n,y);
}

double sigmas(double x, double P, double c)
{
	double A;
}

void zeroes(double n, double *A)
{
	int count;
	
	for(count=0;count<n;count++)
	{
		A[count] = 3;
	}
}