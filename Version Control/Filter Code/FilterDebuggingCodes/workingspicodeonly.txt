// Unscented Kalman Filter File
// Created by Dan Kassen
// Hand-Converted to C from Matlab file written by previous senior design team

#include <stm32f4xx.h>
#include <misc.h>			
#include <stm32f4xx_usart.h>
#include <stm32f4xx_spi.h>
#include <stm32f4xx_tim.h>
#include <stm32f4xx_flash.h>
#include "arm_math.h" 
#include "math_helper.h" 

void init_GPIO(void); // gpio for debugging
void init_SPI1(void);
uint16_t get_spidata(uint16_t data);
void cubedata(void);

void Delay(__IO uint32_t nCount) {
   while(nCount--) {
  }
}

/* These functions handle SPI transfers*/
void SPI1_send(uint16_t data){

	SPI1->DR = data; // write data to be transmitted to the SPI data register
	while( !(SPI1->SR & SPI_I2S_FLAG_TXE) ); // wait until transmit complete
	while( SPI1->SR & SPI_I2S_FLAG_BSY ); // wait until SPI is not busy anymore
}

uint16_t SPI1_receive(void){
	
	while( !(SPI1->SR & SPI_I2S_FLAG_RXNE) ); // wait until receive complete
	while( SPI1->SR & SPI_I2S_FLAG_BSY ); // wait until SPI is not busy anymore
	return SPI1->DR; // return received data from SPI data register
}

// variables for cube
int xaccel;
int yaccel;
int zaccel;
int xgyro;
int ygyro;
int zgyro;
int xmagn;
int ymagn;
int zmagn;
int temper;
int garbage;
int cubecount=0;
int receivedvalue=0;

int main(void) {
	int count;
	
	init_GPIO();
	init_SPI1(); // enables spi
	
	while(1){
		GPIO_SetBits(GPIOD, GPIO_Pin_12);
		cubedata();
		GPIO_ResetBits(GPIOD, GPIO_Pin_12);
		//Delay(0x03FFFFF);
		}
		
}

uint16_t get_spidata(uint16_t data){
	  GPIOE->BSRRH |= GPIO_Pin_7; // set PE7 (CS) low
		SPI1_send(data); // transmit dummy byte and receive data
	  receivedvalue = SPI1_receive(); // receive data
		GPIOE->BSRRL |= GPIO_Pin_7; // set PE7 (CS) high
		return receivedvalue;
}

void cubedata(void){
			get_spidata(0x0A00); // read data
			temper = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0C00); // read data
			xaccel = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0E00); // read data
			yaccel = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0400); // read data
			zaccel = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0600); // read data
			xgyro = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x0800); // read data
			ygyro = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1000); // read data
			zgyro = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1200); // read data
			xmagn = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1400); // read data
			ymagn = (receivedvalue&0x3FFF);
			Delay(40000);
			
			get_spidata(0x1600); // read data
			zmagn = (receivedvalue&0x3FFF);
			Delay(40000);
	
}

void init_GPIO(void){

	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_14 | GPIO_Pin_13 | GPIO_Pin_12; // we want to configure all LED GPIO pins
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT; 		// we want the pins to be an output
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz; 	// this sets the GPIO modules clock speed
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; 	// this sets the pin type to push / pull (as opposed to open drain)
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL; 	// this sets the pullup / pulldown resistors to be inactive
	GPIO_Init(GPIOD, &GPIO_InitStruct); 			// this finally passes all the values to the GPIO_Init function which takes care of setting the corresponding bits.
}

void init_SPI1(void){

	GPIO_InitTypeDef GPIO_InitStruct;
	SPI_InitTypeDef SPI_InitStruct;

	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	/* configure pins used by SPI1
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6 | GPIO_Pin_5;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStruct);

	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);

	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	/* Configure the chip select pin
	   in this case we will use PE7 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOE, &GPIO_InitStruct);

	GPIOE->BSRRL |= GPIO_Pin_7; // set PE7 high

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b; // one packet of data is 16 bits wide
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;        // clock is high when idle
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;      // data sampled at second edge
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64; // SPI frequency is APB2 frequency / 64
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
	SPI_Init(SPI1, &SPI_InitStruct); 
	
	// RCC_PCLK2Config(RCC_HCLK_Div16); // slows down clock speed

	SPI_Cmd(SPI1, ENABLE); // enable SPI1
}