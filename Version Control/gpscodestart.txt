// STM32 USART3 (Tx PB.10, Rx PB.11) STM32F4 Discovery - sourcer32@gmail.com
 
#include "stm32f4_discovery.h"
 
/**************************************************************************************/
 
void RCC_Configuration(void)
{
  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART3 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 
  /* GPIOB clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
}
 
/**************************************************************************************/
 
void GPIO_Configuration(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
 
  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 
  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);
}
 
/**************************************************************************************/
 
void USART3_Configuration(void)
{
    USART_InitTypeDef USART_InitStructure;
 
  /* USARTx configuration ------------------------------------------------------*/
  /* USARTx configured as follow:
        - BaudRate = 9600 baud
        - Word Length = 8 Bits
        - Two Stop Bit
        - Odd parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 4800;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 
  USART_Init(USART3, &USART_InitStructure);
 
  USART_Cmd(USART3, ENABLE);
}
 
/**************************************************************************************/

uint8_t Data=0;
uint8_t Data1=0;
uint8_t Data2=0;
uint8_t Data3=0;
uint8_t Data4=0;
uint8_t Data5=0;
uint8_t Lat;
uint8_t Latdir;
uint8_t Lon;
uint8_t Londir;
uint8_t Time;

 
int main(void)
{
  RCC_Configuration();
 
  GPIO_Configuration();
 
  USART3_Configuration();
 
  while(1)
  {
 
    while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
    Data = USART_ReceiveData(USART3); // Collect Char
		
		/*if(Data==0x24){
			while(Data1!=0x47){
				while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
				Data1 = USART_ReceiveData(USART3); // Collect Char
			}
			
			if(Data1==0x47){
				while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
				Data2 = USART_ReceiveData(USART3); // Collect Char
				
				if(Data2==0x50){
					while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
					Data3 = USART_ReceiveData(USART3); // Collect Char
					
					if(Data3==0x47){
						while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
						Data4 = USART_ReceiveData(USART3); // Collect Char
						
						if(Data4==0x4C){
							while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
							Data5 = USART_ReceiveData(USART3); // Collect Char
							
							if(Data5==0x4C){
								while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
								Lat = USART_ReceiveData(USART3); // Collect Char
								
								while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
								Latdir = USART_ReceiveData(USART3); // Collect Char
								
								while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
								Lon = USART_ReceiveData(USART3); // Collect Char
								
								while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
								Londir = USART_ReceiveData(USART3); // Collect Char
								
								while(USART_GetFlagStatus(USART3, USART_IT_RXNE) == RESET); // Wait for Char
								Time = USART_ReceiveData(USART3); // Collect Char
							}
						}
					}
				}
			}
		}*/
		
		while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET); // Wait on Transmitter Empty
 
		USART_SendData(USART3, Data);
	}
}